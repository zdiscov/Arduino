#define OCTAVE_OFFSET 0
#define isdigit(n) (n >= '0' && n <= '9')

int INA = 9; 
int INB = 10;
int FAN_SLOW = 253;
int FAN_MED = 100; 
int CO_LEVEL_HIGH = 250;
int CO_LEVEL_MED = 200;

const int tonePin = 6;  // arbitrary for arduino boards, set this to whatever you want
int notes[] = { 0,
262, 277, 294, 311, 330, 349, 370, 392, 415, 440, 466, 494,
523, 554, 587, 622, 659, 698, 740, 784, 831, 880, 932, 988,
1047, 1109, 1175, 1245, 1319, 1397, 1480, 1568, 1661, 1760, 1865, 1976,
2093, 2217, 2349, 2489, 2637, 2794, 2960, 3136, 3322, 3520, 3729, 3951
};
//char *song = "GoodBad:d=4,o=5,b=56:32p,32a#,32d#6,32a#,32d#6,8a#.,16f#.,16g#.,d#,32a#,32d#6,32a#,32d#6,8a#.,16f#.,16g#.,c#6,32a#,32d#6,32a#,32d#6,8a#.,16f#.,32f.,32d#.,c#,32a#,32d#6,32a#,32d#6,8a#.,16g#.,d#";
char *alarm = "GoodBad:d=4,o=5,b=56:32p,32a#,32d#6,32a#,32d#6,32p,32a#,32d#6,32a#,32d#6,32p,32a#,32d#6,32a#,32d#6,32p,32a#,32d#6,32a#,32d#6,32p,32a#,32d#6,32a#,32d#6";

void warmup_heater_1_min()
{
      //Heather 5v 60 s
    analogWrite(A1, 1023);
    delay(60000);

}
 
void stop_exhaust_fan() 
{   
  digitalWrite(INA,LOW);
  digitalWrite(INB,LOW); 
}

void start_exhaust_fan()
{
  digitalWrite(INA,LOW);
  analogWrite(INB,FAN_MED); 
}

void start_exhaust_fan_slow()
{
  digitalWrite(INA,LOW);
  analogWrite(INB,FAN_SLOW); 

}


void setup() {
    pinMode(INA,OUTPUT); 
    pinMode(INB,OUTPUT);
    Serial.begin(9600);
    stop_exhaust_fan();
    sound_alarm(alarm);
    //warmup_heater_1_min();
  
}

void loop() {
    float sensor_volt;
    float RS_air; //  Get the value of RS via in a clear air
    float R0;  // Get the value of R0 via in H2
    float sensorValue;
    float sensTemp;
    float digTemp;
    /*--- Get a average data by testing 100 times ---*/

    //Heater 1.4 V 90 s
    analogWrite(A1, (1023/5)*1.4 );
    for(int i = 0; i<100; i++){
        sensTemp = analogRead(A0);
            if(sensTemp > CO_LEVEL_HIGH){
              Serial.println("Carbon Monoxide Detected. Exhaust Fan Started @ High Speed...");
              start_exhaust_fan();
              sound_alarm(alarm);
            }else if(sensTemp < CO_LEVEL_MED){
               Serial.println("Exhaust Fan Stopped");
               stop_exhaust_fan();
            }else{
              Serial.println("Exhaust Fan Started @ Low Speed...");
              start_exhaust_fan_slow();
            }
      digTemp = digitalRead(8);
      sensorValue = sensorValue + sensTemp;
    Serial.print("R0 = ");
    Serial.println(sensTemp);
    Serial.println(digTemp);
    Serial.println("---");
    delay(900);
    }

    sensorValue = sensorValue/100.0;
    /*-----------------------------------------------*/

    sensor_volt = sensorValue/1024*5.0;
    RS_air = (5.0-sensor_volt)/sensor_volt;
    R0 = RS_air/(26+(1/3));

    Serial.print("R0 = ");
    Serial.println(R0);
    delay(1000);
}



void sound_alarm(char *p)
{
  // Absolutely no error checking in here

  byte default_dur = 4;
  byte default_oct = 6;
  int bpm = 63;
  int num;
  long wholenote;
  long duration;
  byte note;
  byte scale;

  // format: d=N,o=N,b=NNN:
  // find the start (skip name, etc)

  while(*p != ':') p++;    // ignore name
  p++;                     // skip ':'

  // get default duration
  if(*p == 'd')
  {
    p++; p++;              // skip "d="
    num = 0;
    while(isdigit(*p))
    {
      num = (num * 10) + (*p++ - '0');
    }
    if(num > 0) default_dur = num;
    p++;                   // skip comma
  }

  Serial.print("ddur: "); Serial.println(default_dur, 10);

  // get default octave
  if(*p == 'o')
  {
    p++; p++;              // skip "o="
    num = *p++ - '0';
    if(num >= 3 && num <=7) default_oct = num;
    p++;                   // skip comma
  }

  Serial.print("doct: "); Serial.println(default_oct, 10);

  // get BPM
  if(*p == 'b')
  {
    p++; p++;              // skip "b="
    num = 0;
    while(isdigit(*p))
    {
      num = (num * 10) + (*p++ - '0');
    }
    bpm = num;
    p++;                   // skip colon
  }

  Serial.print("bpm: "); Serial.println(bpm, 10);

  // BPM usually expresses the number of quarter notes per minute
  wholenote = (60 * 1000L / bpm) * 4;  // this is the time for whole note (in milliseconds)

  Serial.print("wn: "); Serial.println(wholenote, 10);


  // now begin note loop
  while(*p)
  {
    // first, get note duration, if available
    num = 0;
    while(isdigit(*p))
    {
      num = (num * 10) + (*p++ - '0');
    }
   
    if(num) duration = wholenote / num;
    else duration = wholenote / default_dur;  // we will need to check if we are a dotted note after

    // now get the note
    note = 0;

    switch(*p)
    {
      case 'c':
        note = 1;
        break;
      case 'd':
        note = 3;
        break;
      case 'e':
        note = 5;
        break;
      case 'f':
        note = 6;
        break;
      case 'g':
        note = 8;
        break;
      case 'a':
        note = 10;
        break;
      case 'b':
        note = 12;
        break;
      case 'p':
      default:
        note = 0;
    }
    p++;

    // now, get optional '#' sharp
    if(*p == '#')
    {
      note++;
      p++;
    }

    // now, get optional '.' dotted note
    if(*p == '.')
    {
      duration += duration/2;
      p++;
    }
 
    // now, get scale
    if(isdigit(*p))
    {
      scale = *p - '0';
      p++;
    }
    else
    {
      scale = default_oct;
    }

    scale += OCTAVE_OFFSET;

    if(*p == ',')
      p++;       // skip comma for next note (or we may be at the end)

    // now play the note

    if(note)
    {
      tone(tonePin, notes[(scale - 4) * 12 + note]);
      delay(duration);
      noTone(tonePin);
    }
    else
    {
      delay(duration);
    }
  }
}
